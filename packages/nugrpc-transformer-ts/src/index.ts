import TextWriter from "@privyid/nugrpc-writer"
import {
  Saveable,
  TransformAdapter,
  TransformContext,
} from "@privyid/nugrpc-transformer"
import {
  Enum,
  Field,
  getMethodName,
  getModelName,
  getServiceName,
  getUrl,
  isEnum,
  isMap,
  isModel,
  isOneOf,
  isService,
  isType,
  Model,
  ReflectionObject,
  Service,
  Type,
} from "@privyid/nugrpc-utils"

export default class TransformerTS extends TransformAdapter implements Saveable {
  private writer: TextWriter

  constructor (context: TransformContext) {
    super(context)

    this.writer = new TextWriter()

    this.writer.write('/**')
    this.writer.write(' * DONT EDIT THIS FILE')
    this.writer.write(' * This generated by @privyid/nugrpc-codegen')
    this.writer.write(' */')
    this.writer.write("import { useApi, ApiResponse, AxiosRequestConfig } from '@privyid/nugrpc-api'")
    this.writer.line()

    this.writer.write(`export const $api = useApi().create({ prefixURL: '${context.baseUrl ?? '/'}' })`)
    this.writer.line()
  }

  getType (model: Model): string {
    return getModelName(model)
  }

  getFieldType (field: Field): string {
    let type = isModel(field.resolvedType)
      ? this.getType(field.resolvedType)
      : this.getPrimitiveType(field.type)

    if (isMap(field)) {
      const key = this.getPrimitiveType(field.keyType)

      type = `Record<${key}, ${type}>`
    }

    if (field.repeated)
      type = `Array<${type}>`

    return type
  }

  getPrimitiveType (type: string): string {
    switch (type) {
      case 'bool':
        return 'boolean'

      case 'double':
      case 'float':
      case 'int32':
      case 'uint32':
      case 'sint32':
      case 'fixed32':
      case 'sfixed32':
        return 'number'

      case 'string':
      case 'int64':
      case 'uint64':
      case 'sint64':
      case 'fixed64':
      case 'sfixed64':
      case 'bytes':
        return 'string'
    }

    /* istanbul ignore next */
    return 'any'
  }

  transform (node: ReflectionObject) {
    if (isService(node))
      this.transformService(node)

    else if (isType(node))
      this.transformType(node)

    else if (isEnum(node))
      this.transformEnum(node)
  }

  transformType (model: Type) {
    const name = getModelName(model)

    this.writer.write(`export type ${name} = {`)
    this.writer.tab(1)

    for (const field of model.fieldsArray) {
      field.resolve()

      if (!isOneOf(field, model))
        this.writer.write(`${field.name}: ${this.getFieldType(field)};`)
    }

    this.writer.tab(-1)
    this.writer.write('}')

    if (model.oneofsArray.length > 0) {
      for (const oneOf of model.oneofsArray) {
        this.writer.append(' & (')
        this.writer.tab(1)
        this.writer.write(`// oneOf: '${oneOf.name}'`)

        for (let index = 0; index < oneOf.fieldsArray.length; index++) {
          const field   = oneOf.fieldsArray[index]
          const isFirst = index === 0

          field.resolve()

          if (isFirst)
            this.writer.write('{')
          else
            this.writer.append(' | {')

          this.writer.tab(1)
          this.writer.write(`${oneOf.name}: '${field.name}';`)
          this.writer.write(`${field.name}: ${this.getFieldType(field)};`)
          this.writer.tab(-1)
          this.writer.write('}')
        }

        this.writer.tab(-1)
        this.writer.write(')')
      }
    }

    this.writer.line(1)
  }

  transformEnum (model: Enum) {
    const name = getModelName(model)

    this.writer.write(`export enum ${name} {`)
    this.writer.tab(1)

    for (const [key, value] of Object.entries(model.values))
      this.writer.write(`${key} = ${value},`)

    this.writer.tab(-1)
    this.writer.write('}')
    this.writer.line()
  }

  transformService (service: Service) {
    const serviceName = getServiceName(service)

    this.writer.write(`export const ${serviceName} = {`)
    this.writer.tab(1)

    for (const method of service.methodsArray) {
      method.resolve()

      const methodName = getMethodName(method)
      const url        = getUrl(method)

      const request = isModel(method.resolvedRequestType)
        ? this.getType(method.resolvedRequestType)
        : /* istanbul ignore next */ this.getPrimitiveType(method.requestType)

      const response = isModel(method.resolvedResponseType)
        ? this.getType(method.resolvedResponseType)
        : /* istanbul ignore next */ this.getPrimitiveType(method.responseType)

      this.writer.line(1)
      this.writer.write(`async ${methodName} (body: ${request}, config?: AxiosRequestConfig): ApiResponse<${response}> {`)
      this.writer.tab(1)
      this.writer.write(`return $api.post('${url}', body, config)`)
      this.writer.tab(-1)
      this.writer.write('},')
    }

    this.writer.tab(-1)
    this.writer.write('}')
  }

  toString (): string {
    return this.writer.toString()
  }
}
